service: dynamo-local
frameworkVersion: '3'

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  
provider:
  name: aws
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
  environment:
    USERS_TABLE: ${self:custom.userTableName}
    DAM_DATA_TABLE: ${self:custom.damTableName}
    STOCK_TABLE: ${self:custom.stockTableName}

functions:
  api:
    handler: backend/handler.handler
    events:
      # - http: ANY /
      # - http: 'ANY {proxy+}'
      - httpApi: '*'

  dam_schedule:
    handler: jobs/dam.schedule.job.handler
    events:
      - schedule: rate(1 day)

  stock_pull:
    handler: jobs/stocks.handler
    events:
      - schedule: rate(1 day)

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.userTableName}

    StockTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.stockTableName}


custom:
  userTableName: 'users-table-${sls:stage}'
  damTableName: 'dam-data-${sls:stage}'
  stockTableName: 'stock-table-${sls:stage}'
  dynamodb:
    stages: local
    start:
      host: localhost
      port: 8000
      noStart: true
      inMemory: true
  serverless-offline: 
    useChildProcesses: true